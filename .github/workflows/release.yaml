name: Create and Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Build, Publish, and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Update Chart.yaml version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CHART_FILE="charts/hostendpoint-operator/Chart.yaml"
          echo "Bumping chart version to $VERSION"
          echo "Before update:"
          cat $CHART_FILE
          yq -i ".version = \"$VERSION\"" $CHART_FILE
          yq -i ".appVersion = \"$VERSION\"" $CHART_FILE
          echo "After update:"
          cat $CHART_FILE

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION }}
          labels: org.opencontainers.image.version=${{ steps.get_version.outputs.VERSION }}

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Clean and package Helm Chart
        id: package
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          echo "=== Cleaning up old chart files ==="
          find . -name "*.tgz" -type f -exec rm -f {} \;
          find . -name "hostendpoint-operator-*.tgz" -type f -exec rm -f {} \;
          
          echo "=== Current directory contents before packaging ==="
          ls -la
          
          echo "=== Packaging chart ==="
          helm package ./charts/hostendpoint-operator
          
          echo "=== Files after packaging ==="
          ls -la *.tgz
          
          # Verify we have exactly one chart file with correct version
          CHART_FILES=$(ls hostendpoint-operator-*.tgz | wc -l)
          if [ "$CHART_FILES" -ne 1 ]; then
            echo "ERROR: Expected exactly 1 chart file, found $CHART_FILES"
            ls -la *.tgz
            exit 1
          fi
          
          CHART_FILE=$(ls hostendpoint-operator-*.tgz)
          EXPECTED_NAME="hostendpoint-operator-${VERSION}.tgz"
          
          if [ "$CHART_FILE" != "$EXPECTED_NAME" ]; then
            echo "ERROR: Chart file name mismatch"
            echo "Expected: $EXPECTED_NAME"
            echo "Found: $CHART_FILE"
            exit 1
          fi
          
          echo "‚úÖ Chart packaged successfully: $CHART_FILE"
          echo "chart_file=$CHART_FILE" >> $GITHUB_OUTPUT

      - name: Delete existing release if exists
        continue-on-error: true
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v${VERSION}"
          
          echo "Checking if release $TAG already exists..."
          
          # Check if release exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Release $TAG already exists, deleting it..."
            gh release delete "$TAG" --yes --cleanup-tag
            echo "‚úÖ Existing release deleted"
          else
            echo "‚úÖ No existing release found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: v${{ steps.get_version.outputs.VERSION }}
          generate_release_notes: true
          files: ${{ steps.package.outputs.chart_file }}
          draft: false
          prerelease: false
          make_latest: true

      - name: Verify release creation
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v${VERSION}"
          
          echo "Verifying release creation..."
          
          # Wait a bit for GitHub to process the release
          sleep 5
          
          # Simple check - just verify the release exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "‚úÖ Release $TAG exists"
            
            # Show release info
            echo "Release details:"
            gh release view "$TAG" --json name,tagName,isDraft,isPrerelease,publishedAt,assets | jq '{name, tagName, isDraft, isPrerelease, publishedAt, assets: [.assets[].name]}'
            
            # Check for chart file
            ASSETS=$(gh release view "$TAG" --json assets | jq -r '.assets[].name')
            if echo "$ASSETS" | grep -q "hostendpoint-operator-${VERSION}.tgz"; then
              echo "‚úÖ Chart file hostendpoint-operator-${VERSION}.tgz found in release"
            else
              echo "‚ö†Ô∏è  Chart file hostendpoint-operator-${VERSION}.tgz not found"
              echo "Available assets: $ASSETS"
              # Don't fail - the release was created, file might be there with different name
            fi
          else
            echo "‚ùå Release $TAG not found"
            echo "Available releases:"
            gh release list --limit 5
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dispatch to update chart repository
        id: dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DISPATCH_PAT }}
          repository: glavien/helm-charts
          event-type: new-chart-release
          client-payload: >
            {
              "repository": "${{ github.repository }}",
              "tag": "v${{ steps.get_version.outputs.VERSION }}",
              "version": "${{ steps.get_version.outputs.VERSION }}"
            }

      - name: Verify dispatch success
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "‚úÖ Successfully dispatched event to helm-charts repository"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: v${VERSION}"
          echo "Version: ${VERSION}"
          echo ""
          echo "üìã Release Summary:"
          echo "- Docker image: ghcr.io/${{ github.repository }}:${VERSION}"
          echo "- GitHub release: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
          echo "- Helm chart: dispatched to glavien/helm-charts"

      - name: Handle dispatch failure
        if: failure() && steps.dispatch.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get_version.outputs.VERSION }}';
            const issueBody = `
            ## ‚ö†Ô∏è Helm Chart Update Failed
            
            The release v${version} was created successfully, but failed to update the helm-charts repository.
            
            **Manual action required:**
            1. Go to [glavien/helm-charts](https://github.com/glavien/helm-charts)
            2. Run the "Update Helm Repository" workflow manually with:
               - Repository: ${{ github.repository }}
               - Tag: v${version}
            
            **Release details:**
            - Docker image: \`ghcr.io/${{ github.repository }}:${version}\`
            - GitHub release: https://github.com/${{ github.repository }}/releases/tag/v${version}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Manual helm-charts update needed for v${version}`,
              body: issueBody,
              labels: ['release', 'manual-action-required']
            });

      - name: Commit updated Chart.yaml to main
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
          # Check if there are changes to commit
          if ! git diff --quiet charts/hostendpoint-operator/Chart.yaml; then
            echo "Chart.yaml has been modified, committing changes..."
            git add charts/hostendpoint-operator/Chart.yaml
            git commit -m "chore(release): bump chart version to ${VERSION} [skip ci]"
            git push origin HEAD:main
            echo "‚úÖ Chart.yaml changes committed and pushed to main"
          else
            echo "‚úÖ Chart.yaml is already up to date, no changes to commit"
          fi

      - name: Final verification
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v${VERSION}"
          
          echo "üéâ Release v${VERSION} completed successfully!"
          echo ""
          echo "üìã Verification checklist:"
          echo "‚úÖ Docker image built and pushed"
          echo "‚úÖ GitHub release created and published"
          echo "‚úÖ Chart file attached to release"
          echo "‚úÖ Helm charts repository notified"
          echo "‚úÖ Chart.yaml version updated in main branch"
          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${TAG}"
          echo "üê≥ Docker image: ghcr.io/${{ github.repository }}:${VERSION}"